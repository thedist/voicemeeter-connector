{"version":3,"file":"index.module.js","sources":["../src/lib/DLLHandler.ts","../src/lib/VoicemeeterConsts.ts","../src/lib/VoicemeeterConnector.ts","../src/index.ts"],"sourcesContent":["import Registry from \"winreg\";\r\n\r\nconst DLLHandler = {\r\n\tgetDLLPath: async (): Promise<any> => {\r\n\t\tconst regKey = new Registry({\r\n\t\t\thive: Registry.HKLM,\r\n\t\t\tkey: \"\\\\SOFTWARE\\\\WOW6432Node\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall\\\\VB:Voicemeeter {17359A74-1236-5467}\",\r\n\t\t});\r\n\t\treturn new Promise((resolve) => {\r\n\t\t\tregKey.values((err: any, items: any) => {\r\n\t\t\t\tif (err) {\r\n\t\t\t\t\tthrow new Error(err);\r\n\t\t\t\t}\r\n\t\t\t\tconst unistallerPath = items.find((i: any) => i.name === \"UninstallString\").value;\r\n\t\t\t\tconst fileNameIndex = unistallerPath.lastIndexOf(\"\\\\\");\r\n\t\t\t\tresolve(unistallerPath.slice(0, fileNameIndex));\r\n\t\t\t});\r\n\t\t});\r\n\t},\r\n};\r\n\r\nexport default DLLHandler;\r\n","export const InterfaceTypes = {\r\n\tstrip: 0,\r\n\tbus: 1,\r\n};\r\n\r\nexport enum StripProperties {\r\n\tMono = \"Mono\",\r\n\tMute = \"Mute\",\r\n\tSolo = \"Solo\",\r\n\tMC = \"MC\",\r\n\tGain = \"Gain\",\r\n\tGainLayer0 = \"GainLayer[0]\",\r\n\tGainLayer1 = \"GainLayer[1]\",\r\n\tGainLayer2 = \"GainLayer[2]\",\r\n\tGainLayer3 = \"GainLayer[3]\",\r\n\tGainLayer4 = \"GainLayer[4]\",\r\n\tGainLayer5 = \"GainLayer[5]\",\r\n\tGainLayer6 = \"GainLayer[6]\",\r\n\tGainLayer7 = \"GainLayer[7]\",\r\n\tPan_x = \"Pan_x\",\r\n\tPan_y = \"Pan_y\",\r\n\tColor_x = \"Color_x\",\r\n\tColor_y = \"Color_y\",\r\n\tfx_x = \"fx_x\",\r\n\tfx_y = \"fx_y\",\r\n\tAudibility = \"Audibility\",\r\n\tComp = \"Comp\",\r\n\tCompGainIn = \"Comp.GainIn\",\r\n\tCompRatio = \"Comp.Ratio\",\r\n\tCompThreshold = \"Comp.Threshold\",\r\n\tCompAttack = \"Comp.Attack\",\r\n\tCompRelease = \"Comp.Release\",\r\n\tCompKnee = \"Comp.Knee\",\r\n\tCompGainOut = \"Comp.GainOut\",\r\n\tCompMakeUp = \"Comp.MakeUp\",\r\n\tGate = \"Gate\",\r\n\tGateThreshold = \"Gate.Threshold\",\r\n\tGateDamping = \"Gate.Damping\",\r\n\tGateBPSidechain = \"Gate.BPSidechain\",\r\n\tGateAttack = \"Gate.Attack\",\r\n\tGateHold = \"Gate.Hold\",\r\n\tGateRelease = \"Gate.Release\",\r\n\tDenoiser = \"Denoiser\",\r\n\tKaraoke = \"Karaoke\",\r\n\tLimit = \"Limit\",\r\n\tEqGain1 = \"EqGain1\",\r\n\tEqGain2 = \"EqGain2\",\r\n\tEqGain3 = \"EqGain3\",\r\n\tLabel = \"Label\",\r\n\tA1 = \"A1\",\r\n\tA2 = \"A2\",\r\n\tA3 = \"A3\",\r\n\tA4 = \"A4\",\r\n\tA5 = \"A5\",\r\n\tB1 = \"B1\",\r\n\tB2 = \"B2\",\r\n\tB3 = \"B3\",\r\n\tFadeTo = \"FadeTo\",\r\n\tFadeBy = \"FadeBy\",\r\n\tReverb = \"Reverb\",\r\n\tDelay = \"Delay\",\r\n\tFx1 = \"Fx1\",\r\n\tFx2 = \"Fx2\",\r\n\tPostReverb = \"PostReverb\",\r\n\tPostDelay = \"PostDelay\",\r\n\tPostFx1 = \"PostFx1\",\r\n\tPostFx2 = \"PostFx2\",\r\n\tEQon = \"EQ.on\",\r\n\tEQAB = \"EQ.AB\",\r\n\tAppGain = \"AppGain\",\r\n\tAPpMute = \"AppMute\",\r\n\tDeviceName = \"device.name\",\r\n\tDeviceSR = \"device.sr\",\r\n\tDeviceWDM = \"device.wdm\",\r\n\tDeviceKS = \"device.ks\",\r\n\tDeviceMME = \"device.mme\",\r\n\tDeviceASIO = \"device.asio\"\r\n}\r\n\r\nexport enum BusProperties {\r\n\tMono = \"Mono\",\r\n\tMute = \"Mute\",\r\n\tEQ = \"EQ.on\",\r\n\tEQon = \"EQ.on\",\r\n\tEQAB = \"EQ.AB\",\r\n\tGain = \"Gain\",\r\n\tLabel = \"Label\",\r\n\tModeNormal = \"mode.normal\",\r\n\tModeAmix = \"mode.Amix\",\r\n\tModeBmix = \"mode.Bmix\",\r\n\tModeRepeat = \"mode.Repeat\",\r\n\tModeComposite = \"mode.Composite\",\r\n\tModeTVMix = \"mode.TVMix\",\r\n\tModeUpMix21 = \"mode.UpMix21\",\r\n\tModeUpMix41 = \"mode.UpMix41\",\r\n\tModeUpMix61 = \"mode.UpMix61\",\r\n\tModeCenterOnly = \"mode.CenterOnly\",\r\n\tModeLFEOnly = \"mode.LFEOnly\",\r\n\tModeRearOnly = \"mode.RearOnly\",\r\n\tFadeTo = \"FadeTo\",\r\n\tFadeBy = \"FadeBy\",\r\n\tSel = \"Sel\",\r\n\tReturnReverb = \"ReturnReverb\",\r\n\tReturnDelay = \"ReturnDelay\",\r\n\tReturnFx1 = \"ReturnFx1\",\r\n\tReturnFx2 = \"ReturnFx2\",\r\n\tMonitor = \"Monitor\",\r\n\tDeviceName = \"device.name\",\r\n\tDeviceSR = \"device.sr\",\r\n\tDeviceWDM = \"device.wdm\",\r\n\tDeviceKS = \"device.ks\",\r\n\tDeviceMME = \"device.mme\",\r\n\tDeviceASIO = \"device.asio\"\r\n}\r\n\r\nexport enum FXSettings {\r\n\tReverbOn = \"Reverb.On\",\r\n\tReverbAB = \"Reverb.AB\",\r\n\tDelayOn = \"Delay.On\",\r\n\tDelayAB = \"Delay.AB\",\r\n}\r\n\r\nexport enum RecorderProperties {\r\n\tStop = \"stop\",\r\n\tPlay = \"play\",\r\n\tReplay = \"replay\",\r\n\tFastForward = \"ff\",\r\n\tRewind = \"rew\",\r\n\tGoTo = \"goto\",\r\n\tA1 = \"A1\",\r\n\tA2 = \"A2\",\r\n\tA3 = \"A3\",\r\n\tA4 = \"A4\",\r\n\tA5 = \"A5\",\r\n\tB1 = \"B1\",\r\n\tB2 = \"B2\",\r\n\tB3 = \"B3\",\r\n\tRecord = \"record\",\r\n\tPause = \"pause\",\r\n\tLoad = \"load\",\r\n\tSampleRate = \"samplerate\",\r\n\tArmStrip0 = \"ArmStrip(0)\",\r\n\tArmStrip1 = \"ArmStrip(1)\",\r\n\tArmStrip2 = \"ArmStrip(2)\",\r\n\tArmStrip3 = \"ArmStrip(3)\",\r\n\tArmStrip4 = \"ArmStrip(4)\",\r\n\tArmStrip5 = \"ArmStrip(5)\",\r\n\tArmStrip6 = \"ArmStrip(6)\",\r\n\tArmStrip7 = \"ArmStrip(7)\",\r\n\tArmStrip8 = \"ArmStrip(8)\",\r\n\tArmBus0 = \"ArmBus(0)\",\r\n\tArmBus1 = \"ArmBus(1)\",\r\n\tArmBus2 = \"ArmBus(2)\",\r\n\tArmBus3 = \"ArmBus(3)\",\r\n\tArmBus4 = \"ArmBus(4)\",\r\n\tArmBus5 = \"ArmBus(5)\",\r\n\tArmBus6 = \"ArmBus(6)\",\r\n\tArmBus7 = \"ArmBus(7)\",\r\n\tArmBus8 = \"ArmBus(8)\",\r\n\tModeRecBus = \"mode.recbus\",\r\n\tModePlayOnLoad = \"mode.PlayOnLoad\",\r\n\tModeLoop = \"mode.Loop\",\r\n\tModeMultiTrack = \"mode.MultiTrack\",\r\n\tBitResolution = \"bitResolution\",\r\n\tChannel = \"Channel\",\r\n\tKBPS = \"kbps\",\r\n\tFileType = \"FileType\",\r\n\tGain = \"Gain\"\r\n}\r\n\r\nexport enum CommandActions {\r\n\tShutdown = \"Shutdown\",\r\n\tShow = \"Show\",\r\n\tRestart = \"Restart\",\r\n\tEject = \"Eject\",\r\n\tReset = \"Reset\",\r\n\tSave = \"Save\",\r\n\tLoad = \"Load\",\r\n\tLock = \"Lock\",\r\n\tDialogShowVBANChat = \"DialogShow.VBANCHAT\"\r\n}\r\n\r\nexport enum CommandButtons {\r\n\tState = \"ButtonState\",\r\n\tStateOnly = \"ButtonStateOnly\",\r\n\tTrigger = \"ButtonTrigger\",\r\n\tColor = \"ButtonColor\"\r\n}\r\n\r\nexport enum CommandEqs {\r\n\tSaveBus = \"EqSaveBus\",\r\n\tLoadBus = \"EqLoadBus\",\r\n\tSaveStrip = \"EqSaveStrip\",\r\n\tLoadStrip = \"EqLoadStrip\"\r\n}\r\n","/* eslint-disable no-control-regex */\r\nimport ffi from \"ffi-napi\";\r\nimport refArray from \"ref-array-napi\";\r\nimport DLLHandler from \"./DLLHandler\";\r\nimport { Device, VMLibrary, VoiceMeeterTypes } from \"../types/VoicemeeterTypes\";\r\nimport { BusProperties, RecorderProperties, StripProperties, CommandActions, CommandButtons, CommandEqs } from \"./VoicemeeterConsts\";\r\n\r\n/**\r\n * @ignore\r\n */\r\nconst CharArray = refArray(\"char\");\r\n/**\r\n * @ignore\r\n */\r\nconst LongArray = refArray(\"long\");\r\n/**\r\n * @ignore\r\n */\r\nconst FloatArray = refArray(\"float\");\r\n/**\r\n * @ignore\r\n */\r\nlet libVM: VMLibrary;\r\n/**\r\n * @ignore\r\n */\r\nlet instance: Voicemeeter;\r\n\r\nexport default class Voicemeeter {\r\n\t/**\r\n\t * Initializes the voice meeter dll connection.\r\n\t * This call is neccessary to use the api. It returns a promise with a VoiceMeeter instance\r\n\t */\r\n\tpublic static async init(): Promise<Voicemeeter> {\r\n\t\tconst dllPath = await DLLHandler.getDLLPath();\r\n\r\n\t\treturn new Promise((resolve: (instance: Voicemeeter) => any) => {\r\n\t\t\tif (!instance) {\r\n\t\t\t\tinstance = new Voicemeeter();\r\n\t\t\t}\r\n\t\t\tlibVM = ffi.Library(`${dllPath}/VoicemeeterRemote64.dll`, {\r\n\t\t\t\tVBVMR_Login: [\"long\", []],\r\n\t\t\t\tVBVMR_Logout: [\"long\", []],\r\n\t\t\t\tVBVMR_RunVoicemeeter: [\"long\", [\"long\"]],\r\n\t\t\t\tVBVMR_IsParametersDirty: [\"long\", []],\r\n\t\t\t\tVBVMR_GetLevel: [\"long\", [\"long\", \"long\", FloatArray]],\r\n\t\t\t\tVBVMR_GetParameterFloat: [\"long\", [CharArray, FloatArray]],\r\n\t\t\t\tVBVMR_GetParameterStringA: [\"long\", [CharArray, CharArray]],\r\n\t\t\t\tVBVMR_SetParameters: [\"long\", [CharArray]],\r\n\t\t\t\tVBVMR_Output_GetDeviceNumber: [\"long\", []],\r\n\t\t\t\tVBVMR_Output_GetDeviceDescA: [\"long\", [\"long\", LongArray, CharArray, CharArray]],\r\n\t\t\t\tVBVMR_Input_GetDeviceNumber: [\"long\", []],\r\n\t\t\t\tVBVMR_Input_GetDeviceDescA: [\"long\", [\"long\", LongArray, CharArray, CharArray]],\r\n\t\t\t\tVBVMR_GetVoicemeeterType: [\"long\", [LongArray]],\r\n\t\t\t\tVBVMR_GetVoicemeeterVersion: [\"long\", [LongArray]],\r\n\t\t\t});\r\n\t\t\tinstance.isInitialised = true;\r\n\t\t\tresolve(instance);\r\n\t\t});\r\n\t}\r\n\r\n\tprivate isInitialised = false;\r\n\tprivate isConnected = false;\r\n\tprivate outputDevices: Device[] = [];\r\n\tprivate inputDevices: Device[] = [];\r\n\tprivate version = \"\";\r\n\tprivate type: VoiceMeeterTypes;\r\n\tprivate eventPool = [] as Array<() => void>;\r\n\r\n\t/**\r\n\t * Starts a connection to VoiceMeeter\r\n\t */\r\n\tpublic connect = () => {\r\n\t\tif (!this.isInitialised) {\r\n\t\t\tthrow new Error(\"Await the initialisation before connect\");\r\n\t\t}\r\n\t\tif (this.isConnected) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (libVM.VBVMR_Login() === 0) {\r\n\t\t\tthis.isConnected = true;\r\n\t\t\tthis.type = this.getVoicemeeterType();\r\n\t\t\tthis.version = this.getVoicemeeterVersion();\r\n\t\t\tsetInterval(this.checkPropertyChange, 10);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.isConnected = false;\r\n\t\tthrow new Error(\"Connection failed\");\r\n\t};\r\n\r\n\t/**\r\n\t * Getter $outputDevices\r\n\t * @return {Device[] }\r\n\t */\r\n\tpublic get $outputDevices(): Device[] {\r\n\t\treturn this.outputDevices;\r\n\t}\r\n\r\n\t/**\r\n\t * Getter $inputDevices\r\n\t * @return {Device[] }\r\n\t */\r\n\tpublic get $inputDevices(): Device[] {\r\n\t\treturn this.inputDevices;\r\n\t}\r\n\r\n\t/**\r\n\t * Getter $version\r\n\t * @return {string }\r\n\t */\r\n\tpublic get $version(): string {\r\n\t\treturn this.version;\r\n\t}\r\n\r\n\t/**\r\n\t * Getter $type\r\n\t * @return {VoiceMeeterTypes}\r\n\t */\r\n\tpublic get $type(): VoiceMeeterTypes {\r\n\t\treturn this.type;\r\n\t}\r\n\r\n\t/**\r\n\t * Terminates the connection to VoiceMeeter\r\n\t */\r\n\tpublic disconnect = () => {\r\n\t\tif (!this.isConnected) {\r\n\t\t\tthrow new Error(\"Not connected \");\r\n\t\t}\r\n\t\ttry {\r\n\t\t\tif (libVM.VBVMR_Logout() === 0) {\r\n\t\t\t\tthis.isConnected = false;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthrow new Error(\"Disconnect failed\");\r\n\t\t} catch {\r\n\t\t\tthrow new Error(\"Disconnect failed\");\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Updates all input and ouput devices\r\n\t */\r\n\tpublic updateDeviceList = () => {\r\n\t\tif (!this.isConnected) {\r\n\t\t\tthrow new Error(\"Not connected \");\r\n\t\t}\r\n\t\tthis.outputDevices = [];\r\n\t\tthis.inputDevices = [];\r\n\t\tconst outputDeviceNumber = libVM.VBVMR_Output_GetDeviceNumber();\r\n\t\tfor (let i = 0; i < outputDeviceNumber; i++) {\r\n\t\t\tconst hardwareIdPtr = new CharArray(256) as any;\r\n\t\t\tconst namePtr = new CharArray(256) as any;\r\n\t\t\tconst typePtr = new LongArray(1) as any;\r\n\r\n\t\t\tlibVM.VBVMR_Output_GetDeviceDescA(i, typePtr, namePtr, hardwareIdPtr);\r\n\t\t\tthis.outputDevices.push({\r\n\t\t\t\tname: String.fromCharCode(...namePtr.toArray()).replace(/\\u0000+$/g, \"\"),\r\n\t\t\t\thardwareId: String.fromCharCode(...hardwareIdPtr.toArray()).replace(/\\u0000+$/g, \"\"),\r\n\t\t\t\ttype: typePtr[0],\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tconst inputDeviceNumber = libVM.VBVMR_Input_GetDeviceNumber();\r\n\t\tfor (let i = 0; i < inputDeviceNumber; i++) {\r\n\t\t\tconst hardwareIdPtr = new CharArray(256) as any;\r\n\t\t\tconst namePtr = new CharArray(256) as any;\r\n\t\t\tconst typePtr = new LongArray(1) as any;\r\n\r\n\t\t\tlibVM.VBVMR_Input_GetDeviceDescA(i, typePtr, namePtr, hardwareIdPtr);\r\n\t\t\tthis.inputDevices.push({\r\n\t\t\t\tname: String.fromCharCode(...namePtr.toArray()).replace(/\\u0000+$/g, \"\"),\r\n\t\t\t\thardwareId: String.fromCharCode(...hardwareIdPtr.toArray()).replace(/\\u0000+$/g, \"\"),\r\n\t\t\t\ttype: typePtr[0],\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Returns wheter a parameter has been changed\r\n\t */\r\n\tpublic isParametersDirty = () => {\r\n\t\treturn libVM.VBVMR_IsParametersDirty();\r\n\t};\r\n\r\n\t/**\r\n\t * Gets a bus parameter.\r\n\t * @param  {number} index Index of the bus\r\n\t * @param  {BusProperties} property Property which should be get\r\n\t */\r\n\r\n\tpublic getBusParameter = (index: number, property: BusProperties) => {\r\n\t\treturn this.getParameter(\"Bus\", index, property);\r\n\t};\r\n\r\n\t/**\r\n\t * Sets a parameter of a bus.\r\n\t * @param  {number} index Bus number\r\n\t * @param  {BusProperties} property Propertyname which should be changed\r\n\t * @param  {any} value Property value\r\n\t */\r\n\tpublic setBusParameter = (index: number, property: BusProperties, value: any) => {\r\n\t\treturn this.setParameter(\"Bus\", index, property, value);\r\n\t};\r\n\r\n\t/**\r\n\t * Gets input or output levels\r\n\t * @param {0 | 1 | 2 | 3} type 0 = pre fader input | 1 = post fader input | 2 = post Mute input | 3 = Output\r\n\t * @param {number} id 0 indexed level ID, Physical inputs have 2 levels, virutal inputs and all outputs have 8 levels\r\n\t */\r\n\tpublic getLevel = (type: 0 | 1 | 2 | 3, id: number) => {\r\n\t\tif (!this.isConnected) {\r\n\t\t\tthrow new Error(\"Not correct connected \");\r\n\t\t}\r\n\r\n\t\tlet namePtr = new FloatArray(1);\r\n\t\tlibVM.VBVMR_GetLevel(type, id, namePtr);\r\n\t\treturn namePtr[0];\r\n\t}\r\n\r\n\t/**\r\n\t * Get a recorder parameter.\r\n\t * @param {RecorderProperties} property Property which should be get\r\n\t */\r\n\tpublic getRecorderParameter = (property: RecorderProperties) => {\r\n\t\treturn this.getParameter(\"Recorder\", 0, property);\r\n\t}\r\n\r\n\t/**\r\n\t * Set a recorder parameter.\r\n\t * @param {RecorderProperties} property PropertyName which should be changed\r\n\t * @param {any} value Property value\r\n\t */\r\n\tpublic setRecorderParameter = (property: RecorderProperties, value: any) => {\r\n\t\treturn this.setParameter(\"Recorder\", 0, property, value);\r\n\t}\r\n\r\n\t/**\r\n\t * Gets a strip parameter\r\n\t * @param  {number} index Index of the strip\r\n\t * @param  {StripProperties} property Property which should be get\r\n\t */\r\n\tpublic getStripParameter = (index: number, property: StripProperties) => {\r\n\t\treturn this.getParameter(\"Strip\", index, property);\r\n\t};\r\n\r\n\t/**\r\n\t * Sets a parameter of a strip.\r\n\t * @param  {number} index Strip number\r\n\t * @param  {StripProperties} property Propertyname which should be changed\r\n\t * @param  {any} value Property value\r\n\t */\r\n\tpublic setStripParameter = (index: number, property: StripProperties, value: any) => {\r\n\t\treturn this.setParameter(\"Strip\", index, property, value);\r\n\t};\r\n\r\n\t/**\r\n\t * Execute a Command Action\r\n\t * @param  {CommandActions} property Action which should be called\r\n\t * @param  {any} value Property value\r\n\t */\r\n\tpublic executeCommandAction = (property: CommandActions, value: any) => {\r\n\t\treturn this.setParameter(\"Command\", 0, property, value);\r\n\t};\r\n\r\n\t/**\r\n\t * Execute button action\r\n\t * @param  {CommandButtons} property Action which should be called\r\n\t * @param  {any} value Property value\r\n\t */\r\n\tpublic executeButtonAction = (index: number, property: CommandButtons, value: any) => {\r\n\t\treturn this.setParameter(\"Command\", index, property, value);\r\n\t};\r\n\r\n\t/**\r\n\t * Execute EQ action\r\n\t * @param  {CommandEqs} property Action which should be called\r\n\t * @param  {any} value Property value\r\n\t */\r\n\tpublic executeEqAction = (index: number, property: CommandEqs, value: any) => {\r\n\t\treturn this.setParameter(\"Command\", index, property, value);\r\n\t};\r\n\r\n\t/**\r\n\t * Gets Voicemeeter state\r\n\t * @param  {CommandActions.Lock} property Property which should be get\r\n\t */\r\n\tpublic getVMState = (property: CommandActions.Lock | CommandActions.Show) => {\r\n\t\treturn this.getParameter(\"Command\", 0, property);\r\n\t};\r\n\r\n\t/**\r\n\t * Gets a button parameter\r\n\t * @param  {number} index Index of the strip\r\n\t * @param  {CommandButtons} property Property which should be get\r\n\t */\r\n\tpublic getButtonParameter = (index: number, property: CommandButtons) => {\r\n\t\treturn this.getParameter(\"Command\", index, property);\r\n\t};\r\n\r\n\t/**\r\n\t * @param  {()=>any} fn Function which should be called if something changes\r\n\t */\r\n\tpublic attachChangeEvent = (fn: () => any) => {\r\n\t\tthis.eventPool.push(fn);\r\n\t};\r\n\r\n\t/**\r\n\t * Sets an option.\r\n\t * @param {string} option Option to set\r\n\t */\r\n\tpublic setOption = (option: string) => {\r\n\t\tconst script = Buffer.alloc(option.length + 1);\r\n\t\tscript.fill(0).write(option);\r\n\t\tlibVM.VBVMR_SetParameters(script);\r\n\t\treturn new Promise((resolve) => setTimeout(resolve, 200));\r\n\t};\r\n\r\n\t/**\r\n\t * Checks whether properties has been changed and calls all event listeners\r\n\t */\r\n\tprivate checkPropertyChange = () => {\r\n\t\tif (this.isParametersDirty() === 1) {\r\n\t\t\tthis.eventPool.forEach((eventListener) => {\r\n\t\t\t\teventListener();\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Gets installed voicemeeter type.\r\n\t * Means Voicemeeter(normal,banana,potato)\r\n\t */\r\n\tprivate getVoicemeeterType = (): VoiceMeeterTypes => {\r\n\t\tconst typePtr = new LongArray(1);\r\n\t\tif (libVM.VBVMR_GetVoicemeeterType(typePtr) !== 0) {\r\n\t\t\tthrow new Error(\"running failed\");\r\n\t\t}\r\n\t\tswitch (typePtr[0]) {\r\n\t\t\tcase 1: // Voicemeeter\r\n\t\t\t\treturn \"voicemeeter\";\r\n\t\t\tcase 2: // Voicemeeter Banana\r\n\t\t\t\treturn \"voicemeeterBanana\";\r\n\t\t\tcase 3: // Voicemeeter Potato\r\n\t\t\t\treturn \"voicemeeterPotato\";\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"Voicemeeter seems not to be installed\");\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Returns the installed voicemeeter version\r\n\t */\r\n\tprivate getVoicemeeterVersion = () => {\r\n\t\tconst versionPtr = new LongArray(1) as any;\r\n\t\tif (libVM.VBVMR_GetVoicemeeterVersion(versionPtr) !== 0) {\r\n\t\t\tthrow new Error(\"running failed\");\r\n\t\t}\r\n\t\treturn versionPtr;\r\n\t};\r\n\r\n\t/**\r\n\t * Gets a parameter of voicemeeter\r\n\t * @param  {'Strip'|'Bus'|'Recorder'|'Command'} selector Strip, Bus, Recorder or Command\r\n\t * @param  {number} index Number of strip or bus\r\n\t * @param  {StripProperties|BusProperties|RecorderProperties|CommandActions.Lock|CommandActions.Show|CommandButtons} property Property which should be read\r\n\t */\r\n\tprivate getParameter = (selector: \"Strip\" | \"Bus\" | \"Recorder\" | \"Command\", index: number, property: StripProperties | BusProperties | RecorderProperties | CommandActions.Lock | CommandActions.Show | CommandButtons) => {\r\n\t\tlet parameterName = '';\r\n\t\tswitch (selector) {\r\n\t\t\tcase \"Strip\":\r\n\t\t\tcase \"Bus\":\r\n\t\t\t\tparameterName = `${selector}[${index}].${property}`;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"Command\":\r\n\t\t\t\tswitch (property) {\r\n\t\t\t\t\tcase CommandButtons.State:\r\n\t\t\t\t\t\tparameterName = `Command.Button[${index}].State`;\r\n\t\t\t\t\tcase CommandButtons.StateOnly:\r\n\t\t\t\t\t\tparameterName = `Command.Button[${index}].StateOnly`;\r\n\t\t\t\t\tcase CommandButtons.Trigger:\r\n\t\t\t\t\t\tparameterName = `Command.Button[${index}].Trigger`;\r\n\t\t\t\t\tcase CommandButtons.Color:\r\n\t\t\t\t\t\tparameterName = `Command.Button[${index}].Color`;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tparameterName = `Command.${property}`;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tparameterName = `${selector}.${property}`;\r\n\t\t}\r\n\r\n\t\tif (!this.isConnected) {\r\n\t\t\tthrow new Error(\"Not correct connected \");\r\n\t\t}\r\n\r\n\t\tconst hardwareIdPtr = Buffer.alloc(parameterName.length + 1);\r\n\t\thardwareIdPtr.write(parameterName);\r\n\t\tlet namePtr = null;\r\n\r\n\t\tif ([\"Label\", \"FadeTo\", \"FadeBy\", \"AppGain\", \"AppMute\", \"device.name\"].indexOf(property) > -1) {\r\n\t\t\tnamePtr = new CharArray(512);\r\n\t\t\tlibVM.VBVMR_GetParameterStringA(hardwareIdPtr, namePtr);\r\n\t\t\treturn String.fromCharCode\r\n\t\t\t\t.apply(null, namePtr)\r\n\t\t\t\t.split(\"\")\r\n\t\t\t\t.filter((e: string) => {\r\n\t\t\t\t\treturn e !== \"\\0\";\r\n\t\t\t\t})\r\n\t\t\t\t.join(\"\");\r\n\t\t}\r\n\r\n\t\tnamePtr = new FloatArray(1);\r\n\t\tlibVM.VBVMR_GetParameterFloat(hardwareIdPtr, namePtr);\r\n\t\treturn namePtr[0];\r\n\t};\r\n\r\n\t/**\r\n\t * Sets a parameter of a Bus, Strip, Recorder, or Command\r\n\t * @param  {'Strip'|'Bus'|'Recorder'|'Command'} selector\r\n\t * @param  {number} index Number of strip or bus\r\n\t * @param  {StripProperties|BusProperties|RecorderProperties|CommandActions|CommandButtons|CommandEqs} property Propertyname which should be changed\r\n\t * @param  {any} value Property value\r\n\t */\r\n\tprivate setParameter = (\r\n\t\tselector: \"Strip\" | \"Bus\" | \"Recorder\" | \"Command\",\r\n\t\tindex: number,\r\n\t\tproperty: StripProperties | BusProperties | RecorderProperties | CommandActions | CommandButtons | CommandEqs,\r\n\t\tvalue: any\r\n\t): Promise<any> => {\r\n\t\tif (!this.isConnected) {\r\n\t\t\tthrow new Error(\"Not connected \");\r\n\t\t}\r\n\r\n\t\tlet scriptString = '';\r\n\r\n\t\tswitch (selector) {\r\n\t\t\tcase \"Strip\":\r\n\t\t\tcase \"Bus\":\r\n\t\t\t\tscriptString = `${selector}[${index}].${property}=${value};`;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"Command\":\r\n\t\t\t\tswitch (property) {\r\n\t\t\t\t\tcase CommandButtons.State:\r\n\t\t\t\t\t\tscriptString = `Command.Button[${index}].State=${value};`;\r\n\t\t\t\t\tcase CommandButtons.StateOnly:\r\n\t\t\t\t\t\tscriptString = `Command.Button[${index}].StateOnly=${value};`;\r\n\t\t\t\t\tcase CommandButtons.Trigger:\r\n\t\t\t\t\t\tscriptString = `Command.Button[${index}].Trigger=${value};`;\r\n\t\t\t\t\tcase CommandButtons.Color:\r\n\t\t\t\t\t\tscriptString = `Command.Button[${index}].Color=${value};`;\r\n\t\t\t\t\tcase CommandEqs.SaveBus:\r\n\t\t\t\t\t\tscriptString = `Command.SaveBUSEQ[${index}]=${value};`;\r\n\t\t\t\t\tcase CommandEqs.LoadBus:\r\n\t\t\t\t\t\tscriptString = `Command.LoadBUSEQ[${index}]=${value};`;\r\n\t\t\t\t\tcase CommandEqs.SaveStrip:\r\n\t\t\t\t\t\tscriptString = `Command.SaveStripEQ[${index}]=${value};`;\r\n\t\t\t\t\tcase CommandEqs.LoadStrip:\r\n\t\t\t\t\t\tscriptString = `Command.LoadStripEQ[${index}]=${value};`;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tscriptString = `Command.${property}=${value};`;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tscriptString = `${selector}.${property}=${value};`;\r\n\t\t}\r\n\r\n\t\treturn this.setOption(scriptString);\r\n\t};\r\n}\r\n","import Voicemeeter from \"./lib/VoicemeeterConnector\";\r\nimport * as constants from \"./lib/VoicemeeterConsts\";\r\nimport * as types from \"./types/VoicemeeterTypes\";\r\n\r\nconst { BusProperties, InterfaceTypes, StripProperties, FXSettings, RecorderProperties, CommandActions, CommandButtons, CommandEqs } = constants;\r\n\r\nexport { Voicemeeter, BusProperties, InterfaceTypes, StripProperties, FXSettings, RecorderProperties, CommandActions, CommandButtons, CommandEqs, types };\r\n"],"names":["StripProperties","BusProperties","FXSettings","RecorderProperties","CommandActions","CommandButtons","CommandEqs","libVM","instance","CharArray","refArray","LongArray","FloatArray","Voicemeeter","_this","isInitialised","this","isConnected","outputDevices","inputDevices","version","type","eventPool","connect","Error","VBVMR_Login","getVoicemeeterType","getVoicemeeterVersion","setInterval","checkPropertyChange","disconnect","VBVMR_Logout","_unused","updateDeviceList","outputDeviceNumber","VBVMR_Output_GetDeviceNumber","i","hardwareIdPtr","namePtr","typePtr","VBVMR_Output_GetDeviceDescA","push","name","String","fromCharCode","apply","toArray","replace","hardwareId","inputDeviceNumber","VBVMR_Input_GetDeviceNumber","VBVMR_Input_GetDeviceDescA","isParametersDirty","VBVMR_IsParametersDirty","getBusParameter","index","property","getParameter","setBusParameter","value","setParameter","getLevel","id","VBVMR_GetLevel","getRecorderParameter","setRecorderParameter","getStripParameter","setStripParameter","executeCommandAction","executeButtonAction","executeEqAction","getVMState","getButtonParameter","attachChangeEvent","fn","setOption","option","script","Buffer","alloc","length","fill","write","VBVMR_SetParameters","Promise","resolve","setTimeout","forEach","eventListener","VBVMR_GetVoicemeeterType","versionPtr","VBVMR_GetVoicemeeterVersion","selector","parameterName","State","StateOnly","Trigger","Color","indexOf","VBVMR_GetParameterStringA","split","filter","e","join","VBVMR_GetParameterFloat","scriptString","SaveBus","LoadBus","SaveStrip","LoadStrip","init","regKey","Registry","hive","HKLM","key","values","err","items","unistallerPath","find","fileNameIndex","lastIndexOf","slice","reject","DLLHandler","then","dllPath","ffi","Library","VBVMR_RunVoicemeeter","_createClass","get","constants","InterfaceTypes","strip","bus"],"mappings":"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"}
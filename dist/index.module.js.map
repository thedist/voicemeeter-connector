{"version":3,"file":"index.module.js","sources":["../src/lib/DLLHandler.ts","../src/lib/VoicemeeterConsts.ts","../src/lib/VoicemeeterConnector.ts","../src/index.ts"],"sourcesContent":["import Registry from \"winreg\";\r\n\r\nconst DLLHandler = {\r\n\tgetDLLPath: async (): Promise<any> => {\r\n\t\tconst regKey = new Registry({\r\n\t\t\thive: Registry.HKLM,\r\n\t\t\tkey: \"\\\\SOFTWARE\\\\WOW6432Node\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall\\\\VB:Voicemeeter {17359A74-1236-5467}\",\r\n\t\t});\r\n\t\treturn new Promise((resolve) => {\r\n\t\t\tregKey.values((err: any, items: any) => {\r\n\t\t\t\tif (err) {\r\n\t\t\t\t\tthrow new Error(err);\r\n\t\t\t\t}\r\n\t\t\t\tconst unistallerPath = items.find((i: any) => i.name === \"UninstallString\").value;\r\n\t\t\t\tconst fileNameIndex = unistallerPath.lastIndexOf(\"\\\\\");\r\n\t\t\t\tresolve(unistallerPath.slice(0, fileNameIndex));\r\n\t\t\t});\r\n\t\t});\r\n\t},\r\n};\r\n\r\nexport default DLLHandler;\r\n","export const InterfaceTypes = {\r\n\tstrip: 0,\r\n\tbus: 1,\r\n};\r\n\r\nexport enum StripProperties {\r\n\tMono = 'Mono',\r\n\tMute = 'Mute',\r\n\tSolo = 'Solo',\r\n\tMC = 'MC',\r\n\tGain = 'Gain',\r\n\tGainLayer0 = 'GainLayer[0]',\r\n\tGainLayer1 = 'GainLayer[1]',\r\n\tGainLayer2 = 'GainLayer[2]',\r\n\tGainLayer3 = 'GainLayer[3]',\r\n\tGainLayer4 = 'GainLayer[4]',\r\n\tGainLayer5 = 'GainLayer[5]',\r\n\tGainLayer6 = 'GainLayer[6]',\r\n\tGainLayer7 = 'GainLayer[7]',\r\n\tPan_x = 'Pan_x',\r\n\tPan_y = 'Pan_y',\r\n\tColor_x = 'Color_x',\r\n\tColor_y = 'Color_y',\r\n\tfx_x = 'fx_x',\r\n\tfx_y = 'fx_y',\r\n\tAudibility = 'Audibility',\r\n\tComp = 'Comp',\r\n\tCompGainIn = 'Comp.GainIn',\r\n\tCompRatio = 'Comp.Ratio',\r\n\tCompThreshold = 'Comp.Threshold',\r\n\tCompAttack = 'Comp.Attack',\r\n\tCompRelease = 'Comp.Release',\r\n\tCompKnee = 'Comp.Knee',\r\n\tCompGainOut = 'Comp.GainOut',\r\n\tCompMakeUp = 'Comp.MakeUp',\r\n\tGate = 'Gate',\r\n\tGateThreshold = 'Gate.Threshold',\r\n\tGateDamping = 'Gate.Damping',\r\n\tGateBPSidechain = 'Gate.BPSidechain',\r\n\tGateAttack = 'Gate.Attack',\r\n\tGateHold = 'Gate.Hold',\r\n\tGateRelease = 'Gate.Release',\r\n\tDenoiser = 'Denoiser',\r\n\tKaraoke = 'Karaoke',\r\n\tLimit = 'Limit',\r\n\tEqGain1 = 'EqGain1',\r\n\tEqGain2 = 'EqGain2',\r\n\tEqGain3 = 'EqGain3',\r\n\tLabel = 'Label',\r\n\tA1 = 'A1',\r\n\tA2 = 'A2',\r\n\tA3 = 'A3',\r\n\tA4 = 'A4',\r\n\tA5 = 'A5',\r\n\tB1 = 'B1',\r\n\tB2 = 'B2',\r\n\tB3 = 'B3',\r\n\tFadeTo = 'FadeTo',\r\n\tFadeBy = 'FadeBy',\r\n\tReverb = 'Reverb',\r\n\tDelay = 'Delay',\r\n\tFx1 = 'Fx1',\r\n\tFx2 = 'Fx2',\r\n\tPostReverb = 'PostReverb',\r\n\tPostDelay = 'PostDelay',\r\n\tPostFx1 = 'PostFx1',\r\n\tPostFx2 = 'PostFx2',\r\n\tEQon = 'EQ.on',\r\n\tEQAB = 'EQ.AB',\r\n\tAppGain = 'AppGain',\r\n\tAPpMute = 'AppMute',\r\n\tDeviceName = 'device.name',\r\n\tDeviceSR = 'device.sr',\r\n\tDeviceWDM = 'device.wdm',\r\n\tDeviceKS = 'device.ks',\r\n\tDeviceMME = 'device.mme',\r\n\tDeviceASIO = 'device.asio'\r\n}\r\n\r\nexport enum BusProperties {\r\n\tMono = 'Mono',\r\n\tMute = 'Mute',\r\n\tEQ = 'EQ.on',\r\n\tEQon = 'EQ.on',\r\n\tEQAB = 'EQ.AB',\r\n\tGain = 'Gain',\r\n\tLabel = 'Label',\r\n\tModeNormal = 'mode.normal',\r\n\tModeAmix = 'mode.Amix',\r\n\tModeBmix = 'mode.Bmix',\r\n\tModeRepeat = 'mode.Repeat',\r\n\tModeComposite = 'mode.Composite',\r\n\tModeTVMix = 'mode.TVMix',\r\n\tModeUpMix21 = 'mode.UpMix21',\r\n\tModeUpMix41 = 'mode.UpMix41',\r\n\tModeUpMix61 = 'mode.UpMix61',\r\n\tModeCenterOnly = 'mode.CenterOnly',\r\n\tModeLFEOnly = 'mode.LFEOnly',\r\n\tModeRearOnly = 'mode.RearOnly',\r\n\tFadeTo = 'FadeTo',\r\n\tFadeBy = 'FadeBy',\r\n\tSel = 'Sel',\r\n\tReturnReverb = 'ReturnReverb',\r\n\tReturnDelay = 'ReturnDelay',\r\n\tReturnFx1 = 'ReturnFx1',\r\n\tReturnFx2 = 'ReturnFx2',\r\n\tMonitor = 'Monitor',\r\n\tDeviceName = 'device.name',\r\n\tDeviceSR = 'device.sr',\r\n\tDeviceWDM = 'device.wdm',\r\n\tDeviceKS = 'device.ks',\r\n\tDeviceMME = 'device.mme',\r\n\tDeviceASIO = 'device.asio'\r\n}\r\n\r\nexport enum FXSettings {\r\n\tReverbOn = 'Reverb.On',\r\n\tReverbAB = 'Reverb.AB',\r\n\tDelayOn = 'Delay.On',\r\n\tDelayAB = 'Delay.AB',\r\n}\r\n\r\nexport enum RecorderProperties {\r\n\tStop = 'stop',\r\n\tPlay = 'play',\r\n\tReplay = 'replay',\r\n\tFastForward = 'ff',\r\n\tRewind = 'rew',\r\n\tGoTo = 'goto',\r\n\tA1 = 'A1',\r\n\tA2 = 'A2',\r\n\tA3 = 'A3',\r\n\tA4 = 'A4',\r\n\tA5 = 'A5',\r\n\tB1 = 'B1',\r\n\tB2 = 'B2',\r\n\tB3 = 'B3',\r\n\tRecord = 'record',\r\n\tPause = 'pause',\r\n\tLoad = 'load',\r\n\tSampleRate = 'samplerate',\r\n\tArmStrip0 = 'ArmStrip(0)',\r\n\tArmStrip1 = 'ArmStrip(1)',\r\n\tArmStrip2 = 'ArmStrip(2)',\r\n\tArmStrip3 = 'ArmStrip(3)',\r\n\tArmStrip4 = 'ArmStrip(4)',\r\n\tArmStrip5 = 'ArmStrip(5)',\r\n\tArmStrip6 = 'ArmStrip(6)',\r\n\tArmStrip7 = 'ArmStrip(7)',\r\n\tArmStrip8 = 'ArmStrip(8)',\r\n\tArmBus0 = 'ArmBus(0)',\r\n\tArmBus1 = 'ArmBus(1)',\r\n\tArmBus2 = 'ArmBus(2)',\r\n\tArmBus3 = 'ArmBus(3)',\r\n\tArmBus4 = 'ArmBus(4)',\r\n\tArmBus5 = 'ArmBus(5)',\r\n\tArmBus6 = 'ArmBus(6)',\r\n\tArmBus7 = 'ArmBus(7)',\r\n\tArmBus8 = 'ArmBus(8)',\r\n\tModeRecBus = 'mode.recbus',\r\n\tModePlayOnLoad = 'mode.PlayOnLoad',\r\n\tModeLoop = 'mode.Loop',\r\n\tModeMultiTrack = 'mode.MultiTrack',\r\n\tBitResolution = 'bitResolution',\r\n\tChannel = 'Channel',\r\n\tKBPS = 'kbps',\r\n\tFileType = 'FileType',\r\n\tGain = 'Gain'\r\n}\r\n\r\nexport enum CommandActions {\r\n\tShutdown = 'Shutdown',\r\n\tShow = 'Show',\r\n\tRestart = 'Restart',\r\n\tEject = 'Eject',\r\n\tReset = 'Reset',\r\n\tSave = 'Save',\r\n\tLoad = 'Load',\r\n\tLock = 'Lock',\r\n\tDialogShowVBANChat = 'DialogShow.VBANCHAT'\r\n}\r\n\r\nexport enum CommandButtons {\r\n\tState = 'ButtonState',\r\n\tStateOnly = 'ButtonStateOnly',\r\n\tTrigger = 'ButtonTrigger',\r\n\tColor = 'ButtonColor'\r\n}\r\n\r\nexport enum CommandEqs {\r\n\tSaveBus = 'EqSaveBus',\r\n\tLoadBus = 'EqLoadBus',\r\n\tSaveStrip = 'EqSaveStrip',\r\n\tLoadStrip = 'EqLoadStrip'\r\n}\r\n\r\nexport enum VBAN {\r\n\tEnable = 'Enable'\r\n}\r\n\r\nexport enum VBANInstream {\r\n\tOn = 'on',\r\n\tName = 'name',\r\n\tIP = 'ip',\r\n\tPort = 'port',\r\n\tSR = 'sr',\r\n\tChannel = 'channel',\r\n\tBit = 'bit',\r\n\tQuality = 'quality',\r\n\tRoute = 'route'\r\n}\r\n\r\nexport enum VBANOutstream {\r\n\tOn = 'on',\r\n\tName = 'name',\r\n\tIP = 'ip',\r\n\tPort = 'port',\r\n\tSR = 'sr',\r\n\tChannel = 'channel',\r\n\tBit = 'bit',\r\n\tQuality = 'quality',\r\n\tRoute = 'route'\r\n}","/* eslint-disable no-control-regex */\r\nimport ffi from 'ffi-napi';\r\nimport refArray from 'ref-array-napi';\r\nimport DLLHandler from './DLLHandler';\r\nimport { Device, VMLibrary, VoiceMeeterTypes } from '../types/VoicemeeterTypes';\r\nimport {\r\n\tBusProperties,\r\n\tRecorderProperties,\r\n\tStripProperties,\r\n\tCommandActions,\r\n\tCommandButtons,\r\n\tCommandEqs,\r\n\tVBAN,\r\n\tVBANInstream,\r\n\tVBANOutstream\r\n} from './VoicemeeterConsts';\r\n\r\n/**\r\n * @ignore\r\n */\r\nconst CharArray = refArray('char');\r\n/**\r\n * @ignore\r\n */\r\nconst LongArray = refArray('long');\r\n/**\r\n * @ignore\r\n */\r\nconst FloatArray = refArray('float');\r\n/**\r\n * @ignore\r\n */\r\nlet libVM: VMLibrary;\r\n/**\r\n * @ignore\r\n */\r\nlet instance: Voicemeeter;\r\n\r\nexport default class Voicemeeter {\r\n\t/**\r\n\t * Initializes the voice meeter dll connection.\r\n\t * This call is neccessary to use the api. It returns a promise with a VoiceMeeter instance\r\n\t */\r\n\tpublic static async init(): Promise<Voicemeeter> {\r\n\t\tconst dllPath = await DLLHandler.getDLLPath();\r\n\r\n\t\treturn new Promise((resolve: (instance: Voicemeeter) => any) => {\r\n\t\t\tif (!instance) {\r\n\t\t\t\tinstance = new Voicemeeter();\r\n\t\t\t}\r\n\t\t\tlibVM = ffi.Library(`${dllPath}/VoicemeeterRemote64.dll`, {\r\n\t\t\t\tVBVMR_Login: ['long', []],\r\n\t\t\t\tVBVMR_Logout: ['long', []],\r\n\t\t\t\tVBVMR_RunVoicemeeter: ['long', ['long']],\r\n\t\t\t\tVBVMR_IsParametersDirty: ['long', []],\r\n\t\t\t\tVBVMR_GetLevel: ['long', ['long', 'long', FloatArray]],\r\n\t\t\t\tVBVMR_GetParameterFloat: ['long', [CharArray, FloatArray]],\r\n\t\t\t\tVBVMR_GetParameterStringA: ['long', [CharArray, CharArray]],\r\n\t\t\t\tVBVMR_SetParameters: ['long', [CharArray]],\r\n\t\t\t\tVBVMR_Output_GetDeviceNumber: ['long', []],\r\n\t\t\t\tVBVMR_Output_GetDeviceDescA: ['long', ['long', LongArray, CharArray, CharArray]],\r\n\t\t\t\tVBVMR_Input_GetDeviceNumber: ['long', []],\r\n\t\t\t\tVBVMR_Input_GetDeviceDescA: ['long', ['long', LongArray, CharArray, CharArray]],\r\n\t\t\t\tVBVMR_GetVoicemeeterType: ['long', [LongArray]],\r\n\t\t\t\tVBVMR_GetVoicemeeterVersion: ['long', [LongArray]],\r\n\t\t\t});\r\n\t\t\tinstance.isInitialised = true;\r\n\t\t\tresolve(instance);\r\n\t\t});\r\n\t}\r\n\r\n\tprivate isInitialised = false;\r\n\tprivate isConnected = false;\r\n\tprivate outputDevices: Device[] = [];\r\n\tprivate inputDevices: Device[] = [];\r\n\tprivate version = '';\r\n\tprivate type: VoiceMeeterTypes;\r\n\tprivate eventPool = [] as Array<() => void>;\r\n\r\n\t/**\r\n\t * Starts a connection to VoiceMeeter\r\n\t */\r\n\tpublic connect = () => {\r\n\t\tif (!this.isInitialised) {\r\n\t\t\tthrow new Error('Await the initialisation before connect');\r\n\t\t}\r\n\t\tif (this.isConnected) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (libVM.VBVMR_Login() === 0) {\r\n\t\t\tthis.isConnected = true;\r\n\t\t\tthis.type = this.getVoicemeeterType();\r\n\t\t\tthis.version = this.getVoicemeeterVersion();\r\n\t\t\tsetInterval(this.checkPropertyChange, 10);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.isConnected = false;\r\n\t\tthrow new Error('Connection failed');\r\n\t};\r\n\r\n\t/**\r\n\t * Getter $outputDevices\r\n\t * @return {Device[] }\r\n\t */\r\n\tpublic get $outputDevices(): Device[] {\r\n\t\treturn this.outputDevices;\r\n\t}\r\n\r\n\t/**\r\n\t * Getter $inputDevices\r\n\t * @return {Device[] }\r\n\t */\r\n\tpublic get $inputDevices(): Device[] {\r\n\t\treturn this.inputDevices;\r\n\t}\r\n\r\n\t/**\r\n\t * Getter $version\r\n\t * @return {string }\r\n\t */\r\n\tpublic get $version(): string {\r\n\t\treturn this.version;\r\n\t}\r\n\r\n\t/**\r\n\t * Getter $type\r\n\t * @return {VoiceMeeterTypes}\r\n\t */\r\n\tpublic get $type(): VoiceMeeterTypes {\r\n\t\treturn this.type;\r\n\t}\r\n\r\n\t/**\r\n\t * Terminates the connection to VoiceMeeter\r\n\t */\r\n\tpublic disconnect = () => {\r\n\t\tif (!this.isConnected) {\r\n\t\t\tthrow new Error('Not connected');\r\n\t\t}\r\n\t\ttry {\r\n\t\t\tif (libVM.VBVMR_Logout() === 0) {\r\n\t\t\t\tthis.isConnected = false;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthrow new Error('Disconnect failed');\r\n\t\t} catch {\r\n\t\t\tthrow new Error('Disconnect failed');\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Updates all input and ouput devices\r\n\t */\r\n\tpublic updateDeviceList = () => {\r\n\t\tif (!this.isConnected) {\r\n\t\t\tthrow new Error('Not connected');\r\n\t\t}\r\n\t\tthis.outputDevices = [];\r\n\t\tthis.inputDevices = [];\r\n\t\tconst outputDeviceNumber = libVM.VBVMR_Output_GetDeviceNumber();\r\n\t\tfor (let i = 0; i < outputDeviceNumber; i++) {\r\n\t\t\tconst hardwareIdPtr = new CharArray(256) as any;\r\n\t\t\tconst namePtr = new CharArray(256) as any;\r\n\t\t\tconst typePtr = new LongArray(1) as any;\r\n\r\n\t\t\tlibVM.VBVMR_Output_GetDeviceDescA(i, typePtr, namePtr, hardwareIdPtr);\r\n\t\t\tthis.outputDevices.push({\r\n\t\t\t\tname: String.fromCharCode(...namePtr.toArray()).replace(/\\u0000+$/g, ''),\r\n\t\t\t\thardwareId: String.fromCharCode(...hardwareIdPtr.toArray()).replace(/\\u0000+$/g, ''),\r\n\t\t\t\ttype: typePtr[0],\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tconst inputDeviceNumber = libVM.VBVMR_Input_GetDeviceNumber();\r\n\t\tfor (let i = 0; i < inputDeviceNumber; i++) {\r\n\t\t\tconst hardwareIdPtr = new CharArray(256) as any;\r\n\t\t\tconst namePtr = new CharArray(256) as any;\r\n\t\t\tconst typePtr = new LongArray(1) as any;\r\n\r\n\t\t\tlibVM.VBVMR_Input_GetDeviceDescA(i, typePtr, namePtr, hardwareIdPtr);\r\n\t\t\tthis.inputDevices.push({\r\n\t\t\t\tname: String.fromCharCode(...namePtr.toArray()).replace(/\\u0000+$/g, ''),\r\n\t\t\t\thardwareId: String.fromCharCode(...hardwareIdPtr.toArray()).replace(/\\u0000+$/g, ''),\r\n\t\t\t\ttype: typePtr[0],\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Returns wheter a parameter has been changed\r\n\t */\r\n\tpublic isParametersDirty = () => {\r\n\t\treturn libVM.VBVMR_IsParametersDirty();\r\n\t};\r\n\r\n\t/**\r\n\t * Gets a bus parameter.\r\n\t * @param  {number} index Index of the bus\r\n\t * @param  {BusProperties} property Property which should be get\r\n\t */\r\n\r\n\tpublic getBusParameter = (index: number, property: BusProperties) => {\r\n\t\treturn this.getParameter('Bus', index, property);\r\n\t};\r\n\r\n\t/**\r\n\t * Sets a parameter of a bus.\r\n\t * @param  {number} index Bus number\r\n\t * @param  {BusProperties} property Propertyname which should be changed\r\n\t * @param  {any} value Property value\r\n\t */\r\n\tpublic setBusParameter = (index: number, property: BusProperties, value: any) => {\r\n\t\treturn this.setParameter('Bus', index, property, value);\r\n\t};\r\n\r\n\t/**\r\n\t * Gets input or output levels\r\n\t * @param {0 | 1 | 2 | 3} type 0 = pre fader input | 1 = post fader input | 2 = post Mute input | 3 = Output\r\n\t * @param {number} id 0 indexed level ID, Physical inputs have 2 levels, virutal inputs and all outputs have 8 levels\r\n\t */\r\n\tpublic getLevel = (type: 0 | 1 | 2 | 3, id: number) => {\r\n\t\tif (!this.isConnected) {\r\n\t\t\tthrow new Error('Not correct connected');\r\n\t\t}\r\n\r\n\t\tlet namePtr = new FloatArray(1);\r\n\t\tlibVM.VBVMR_GetLevel(type, id, namePtr);\r\n\t\treturn namePtr[0];\r\n\t}\r\n\r\n\t/**\r\n\t * Get a recorder parameter.\r\n\t * @param {RecorderProperties} property Property which should be get\r\n\t */\r\n\tpublic getRecorderParameter = (property: RecorderProperties) => {\r\n\t\treturn this.getParameter('Recorder', 0, property);\r\n\t}\r\n\r\n\t/**\r\n\t * Set a recorder parameter.\r\n\t * @param {RecorderProperties} property PropertyName which should be changed\r\n\t * @param {any} value Property value\r\n\t */\r\n\tpublic setRecorderParameter = (property: RecorderProperties, value: any) => {\r\n\t\treturn this.setParameter('Recorder', 0, property, value);\r\n\t}\r\n\r\n\t/**\r\n\t * Gets a strip parameter\r\n\t * @param  {number} index Index of the strip\r\n\t * @param  {StripProperties} property Property which should be get\r\n\t */\r\n\tpublic getStripParameter = (index: number, property: StripProperties) => {\r\n\t\treturn this.getParameter('Strip', index, property);\r\n\t};\r\n\r\n\t/**\r\n\t * Sets a parameter of a strip.\r\n\t * @param  {number} index Strip number\r\n\t * @param  {StripProperties} property Propertyname which should be changed\r\n\t * @param  {any} value Property value\r\n\t */\r\n\tpublic setStripParameter = (index: number, property: StripProperties, value: any) => {\r\n\t\treturn this.setParameter('Strip', index, property, value);\r\n\t};\r\n\r\n\t/**\r\n\t * Gets VBAN On/Off parameter\r\n\t */\r\n\tpublic getVBANParameter = () => {\r\n\t\treturn this.getParameter('VBAN', 0, VBAN.Enable)\r\n\t};\r\n\r\n\t/**\r\n\t * Set  VBAN On/Off parameter\r\n\t * @param {any} value Property value\r\n\t */\r\n\tpublic setVBANParameter = (value: any) => {\r\n\t\treturn this.setParameter('VBAN', 0, VBAN.Enable, value)\r\n\t};\r\n\t\t\r\n\t/**\r\n\t * get VBAN Incoming Stream parameter\r\n\t * @param  {nmber} index VBAN Stream incoming stream index\r\n\t * @param  {VBANInstream} property Propertyname which should be changed\r\n\t */\r\n\tpublic getVBANInstreamParameter = (index: number, property: VBANInstream) => {\r\n\t\treturn this.getParameter('VBANInstream', index, property)\r\n\t};\r\n\r\n\t/**\r\n\t * Set VBAN Incoming Stream parameter\r\n\t * @param  {nmber} index VBAN Stream incoming stream index\r\n\t * @param  {VBANInstream} property Propertyname which should be changed\r\n\t * @param\t {any} value Property value\r\n\t */\r\n\tpublic setVBANInstreamParameter = (index: number, property: VBANInstream, value: any) => {\r\n\t\treturn this.setParameter('VBANInstream', index, property, value)\r\n\t};\r\n\r\n\t/**\r\n\t * get VBAN Outgoing Stream parameter\r\n\t * @param  {nmber} index VBAN Stream incoming stream index\r\n\t * @param  {VBANInstream} property Propertyname which should be changed\r\n\t */\r\n\tpublic getVBANOutstreamParameter = (index: number, property: VBANOutstream) => {\r\n\t\treturn this.getParameter('VBANOutstream', index, property)\r\n\t};\r\n\r\n\t/**\r\n\t * Set VBAN Outgoing Stream parameter\r\n\t * @param  {nmber} index VBAN Stream incoming stream index\r\n\t * @param  {VBANInstream} property Propertyname which should be changed\r\n\t * @param\t {any} value Property value\r\n\t */\r\n\tpublic setVBANOutstreamParameter = (index: number, property: VBANOutstream, value: any) => {\r\n\t\treturn this.setParameter('VBANOutstream', index, property, value)\r\n\t};\r\n\r\n\t/**\r\n\t * Execute a Command Action\r\n\t * @param  {CommandActions} property Action which should be called\r\n\t * @param  {any} value Property value\r\n\t */\r\n\tpublic executeCommandAction = (property: CommandActions, value: any) => {\r\n\t\treturn this.setParameter('Command', 0, property, value);\r\n\t};\r\n\r\n\t/**\r\n\t * Execute button action\r\n\t * @param  {CommandButtons} property Action which should be called\r\n\t * @param  {any} value Property value\r\n\t */\r\n\tpublic executeButtonAction = (index: number, property: CommandButtons, value: any) => {\r\n\t\treturn this.setParameter('Command', index, property, value);\r\n\t};\r\n\r\n\t/**\r\n\t * Execute EQ action\r\n\t * @param  {CommandEqs} property Action which should be called\r\n\t * @param  {any} value Property value\r\n\t */\r\n\tpublic executeEqAction = (index: number, property: CommandEqs, value: any) => {\r\n\t\treturn this.setParameter('Command', index, property, value);\r\n\t};\r\n\r\n\t/**\r\n\t * Gets Voicemeeter state\r\n\t * @param  {CommandActions.Lock} property Property which should be get\r\n\t */\r\n\tpublic getVMState = (property: CommandActions.Lock | CommandActions.Show) => {\r\n\t\treturn this.getParameter('Command', 0, property);\r\n\t};\r\n\r\n\t/**\r\n\t * Gets a button parameter\r\n\t * @param  {number} index Index of the strip\r\n\t * @param  {CommandButtons} property Property which should be get\r\n\t */\r\n\tpublic getButtonParameter = (index: number, property: CommandButtons) => {\r\n\t\treturn this.getParameter('Command', index, property);\r\n\t};\r\n\r\n\t/**\r\n\t * @param  {()=>any} fn Function which should be called if something changes\r\n\t */\r\n\tpublic attachChangeEvent = (fn: () => any) => {\r\n\t\tthis.eventPool.push(fn);\r\n\t};\r\n\r\n\t/**\r\n\t * Sets an option.\r\n\t * @param {string} option Option to set\r\n\t */\r\n\tpublic setOption = (option: string) => {\r\n\t\tconst script = Buffer.alloc(option.length + 1);\r\n\t\tscript.fill(0).write(option);\r\n\t\tlibVM.VBVMR_SetParameters(script);\r\n\t\treturn new Promise((resolve) => setTimeout(resolve, 200));\r\n\t};\r\n\r\n\t/**\r\n\t * Checks whether properties has been changed and calls all event listeners\r\n\t */\r\n\tprivate checkPropertyChange = () => {\r\n\t\tif (this.isParametersDirty() === 1) {\r\n\t\t\tthis.eventPool.forEach((eventListener) => {\r\n\t\t\t\teventListener();\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Gets installed voicemeeter type.\r\n\t * Means Voicemeeter(normal,banana,potato)\r\n\t */\r\n\tprivate getVoicemeeterType = (): VoiceMeeterTypes => {\r\n\t\tconst typePtr = new LongArray(1);\r\n\t\tif (libVM.VBVMR_GetVoicemeeterType(typePtr) !== 0) {\r\n\t\t\tthrow new Error('running failed');\r\n\t\t}\r\n\t\tswitch (typePtr[0]) {\r\n\t\t\tcase 1: // Voicemeeter\r\n\t\t\t\treturn 'voicemeeter';\r\n\t\t\tcase 2: // Voicemeeter Banana\r\n\t\t\t\treturn 'voicemeeterBanana';\r\n\t\t\tcase 3: // Voicemeeter Potato\r\n\t\t\t\treturn 'voicemeeterPotato';\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error('Voicemeeter seems not to be installed');\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Returns the installed voicemeeter version\r\n\t */\r\n\tprivate getVoicemeeterVersion = () => {\r\n\t\tconst versionPtr = new LongArray(1) as any;\r\n\t\tif (libVM.VBVMR_GetVoicemeeterVersion(versionPtr) !== 0) {\r\n\t\t\tthrow new Error('running failed');\r\n\t\t}\r\n\t\treturn versionPtr;\r\n\t};\r\n\r\n\t/**\r\n\t * Gets a parameter of voicemeeter\r\n\t * @param  {'Strip'|'Bus'|'Recorder'|'Command'} selector Strip, Bus, Recorder or Command\r\n\t * @param  {number} index Number of strip or bus\r\n\t * @param  {StripProperties|BusProperties|RecorderProperties|CommandActions.Lock|CommandActions.Show|CommandButtons} property Property which should be read\r\n\t */\r\n\tprivate getParameter = (\r\n\t\tselector: 'Strip' | 'Bus' | 'Recorder' | 'Command' | 'VBAN' | 'VBANInstream' | 'VBANOutstream',\r\n\t\tindex: number,\r\n\t\tproperty: StripProperties | BusProperties | RecorderProperties | CommandActions.Lock | CommandActions.Show | CommandButtons | VBAN | VBANInstream | VBANOutstream,\r\n\t) => {\r\n\t\tlet parameterName = `${selector}.${property}`\r\n\r\n\t\tif (selector === 'Strip') {\r\n\t\t\tparameterName = `${selector}[${index}].${property}`\r\n\t\t} else if (selector === 'Bus') {\r\n\t\t\tparameterName = `${selector}[${index}].${property}`\r\n\t\t} else if (selector === 'Command') {\r\n\t\t\tparameterName = `Command.${property}`\r\n\t\t\tif (property === CommandButtons.State) parameterName = `Command.Button[${index}].State`\r\n\t\t\tif (property === CommandButtons.State) parameterName = `Command.Button[${index}].StateOnly`\r\n\t\t\tif (property === CommandButtons.State) parameterName = `Command.Button[${index}].Trigger`\r\n\t\t\tif (property === CommandButtons.State) parameterName = `Command.Button[${index}].Color`\r\n\t\t} else if (selector === 'VBAN') {\r\n\t\t\tparameterName = `vban.Enable`\r\n\t\t} else if (selector === 'VBANInstream') {\r\n\t\t\tparameterName = `vban.instream[${index}].${property}`\r\n\t\t} else if (selector === 'VBANOutstream') {\r\n\t\t\tparameterName = `vban.outstream[${index}].${property}`\r\n\t\t}\r\n\r\n\t\tif (!this.isConnected) {\r\n\t\t\tthrow new Error('Not correct connected');\r\n\t\t}\r\n\t\tconst hardwareIdPtr = Buffer.alloc(parameterName.length + 1);\r\n\t\thardwareIdPtr.write(parameterName);\r\n\t\tlet namePtr = null;\r\n\r\n\t\tif (['Label', 'FadeTo', 'FadeBy', 'AppGain', 'AppMute', 'device.name'].indexOf(property) > -1) {\r\n\t\t\tnamePtr = new CharArray(512);\r\n\t\t\tlibVM.VBVMR_GetParameterStringA(hardwareIdPtr, namePtr);\r\n\t\t\treturn String.fromCharCode\r\n\t\t\t\t.apply(null, namePtr)\r\n\t\t\t\t.split('')\r\n\t\t\t\t.filter((e: string) => {\r\n\t\t\t\t\treturn e !== '\\0';\r\n\t\t\t\t})\r\n\t\t\t\t.join('');\r\n\t\t}\r\n\r\n\t\tnamePtr = new FloatArray(1);\r\n\t\tlibVM.VBVMR_GetParameterFloat(hardwareIdPtr, namePtr);\r\n\t\treturn namePtr[0];\r\n\t};\r\n\r\n\t/**\r\n\t * Sets a parameter of a Bus, Strip, Recorder, or Command\r\n\t * @param  {'Strip'|'Bus'|'Recorder'|'Command'} selector\r\n\t * @param  {number} index Number of strip or bus\r\n\t * @param  {StripProperties|BusProperties|RecorderProperties|CommandActions|CommandButtons|CommandEqs} property Propertyname which should be changed\r\n\t * @param  {any} value Property value\r\n\t */\r\n\tprivate setParameter = (\r\n\t\tselector: 'Strip' | 'Bus' | 'Recorder' | 'Command' | 'VBAN' | 'VBANInstream' | 'VBANOutstream',\r\n\t\tindex: number,\r\n\t\tproperty: StripProperties | BusProperties | RecorderProperties | CommandActions | CommandButtons | CommandEqs | VBAN | VBANInstream | VBANOutstream,\r\n\t\tvalue: any\r\n\t): Promise<any> => {\r\n\t\tif (!this.isConnected) {\r\n\t\t\tthrow new Error('Not connected');\r\n\t\t}\r\n\r\n\t\tlet scriptString = '';\r\n\r\n\t\tif (selector === 'Strip') {\r\n\t\t\tscriptString = `${selector}[${index}].${property}=${value};`\r\n\t\t} else if (selector === 'Bus') {\r\n\t\t\tscriptString = `${selector}[${index}].${property}=${value};`\r\n\t\t} else if (selector === 'Command') {\r\n\t\t\tscriptString = `Command.${property}=${value};`;\r\n\t\t\tif (property === CommandButtons.State) scriptString = `Command.Button[${index}].State=${value};`\r\n\t\t\tif (property === CommandButtons.StateOnly) scriptString = `Command.Button[${index}].StateOnly=${value};`\r\n\t\t\tif (property === CommandButtons.Trigger) scriptString = `Command.Button[${index}].Trigger=${value};`\r\n\t\t\tif (property === CommandButtons.Color) scriptString = `Command.Button[${index}].Color=${value};`\r\n\t\t\tif (property === CommandEqs.SaveBus) scriptString = `Command.SaveBUSEQ[${index}]=${value};`\r\n\t\t\tif (property === CommandEqs.LoadBus) scriptString = `Command.LoadBUSEQ[${index}]=${value};`\r\n\t\t\tif (property === CommandEqs.SaveStrip) scriptString = `Command.SaveStripEQ[${index}]=${value};`\r\n\t\t\tif (property === CommandEqs.LoadStrip) scriptString = `Command.LoadStripEQ[${index}]=${value};`\r\n\t\t} else if (selector === 'VBAN') {\r\n\t\t\tscriptString = `vban.Enable=${value}`\r\n\t\t} else if (selector === 'VBANInstream') {\r\n\t\t\tscriptString = `vban.instream[${index}].${property}=${value}`\r\n\t\t} else if (selector === 'VBANOutstream') {\r\n\t\t\tscriptString = `vban.outstream[${index}].${property}=${value}`\r\n\t\t} else {\r\n\t\t\tscriptString = `${selector}.${property}=${value};`\r\n\t\t}\r\n\r\n\t\treturn this.setOption(scriptString);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets an option from a raw text string\r\n\t * @param  {string} value raw command\r\n\t */\r\n\tpublic setRaw = (value: string) => {\r\n\t\treturn this.setOption(value)\r\n\t}\r\n}\r\n","import Voicemeeter from \"./lib/VoicemeeterConnector\";\r\nimport * as constants from \"./lib/VoicemeeterConsts\";\r\nimport * as types from \"./types/VoicemeeterTypes\";\r\n\r\nconst { BusProperties, InterfaceTypes, StripProperties, FXSettings, RecorderProperties, CommandActions, CommandButtons, CommandEqs, VBAN, VBANInstream, VBANOutstream } = constants;\r\n\r\nexport { Voicemeeter, BusProperties, InterfaceTypes, StripProperties, FXSettings, RecorderProperties, CommandActions, CommandButtons, CommandEqs, VBAN, VBANInstream, VBANOutstream, types };\r\n"],"names":["StripProperties","BusProperties","FXSettings","RecorderProperties","CommandActions","CommandButtons","CommandEqs","VBAN","VBANInstream","VBANOutstream","libVM","instance","CharArray","refArray","LongArray","FloatArray","Voicemeeter","_this","this","isInitialised","isConnected","outputDevices","inputDevices","version","type","eventPool","connect","Error","VBVMR_Login","getVoicemeeterType","getVoicemeeterVersion","setInterval","checkPropertyChange","disconnect","VBVMR_Logout","_unused","updateDeviceList","outputDeviceNumber","VBVMR_Output_GetDeviceNumber","i","hardwareIdPtr","namePtr","typePtr","VBVMR_Output_GetDeviceDescA","push","name","String","fromCharCode","apply","toArray","replace","hardwareId","inputDeviceNumber","VBVMR_Input_GetDeviceNumber","VBVMR_Input_GetDeviceDescA","isParametersDirty","VBVMR_IsParametersDirty","getBusParameter","index","property","getParameter","setBusParameter","value","setParameter","getLevel","id","VBVMR_GetLevel","getRecorderParameter","setRecorderParameter","getStripParameter","setStripParameter","getVBANParameter","Enable","setVBANParameter","getVBANInstreamParameter","setVBANInstreamParameter","getVBANOutstreamParameter","setVBANOutstreamParameter","executeCommandAction","executeButtonAction","executeEqAction","getVMState","getButtonParameter","attachChangeEvent","fn","setOption","option","script","Buffer","alloc","length","fill","write","VBVMR_SetParameters","Promise","resolve","setTimeout","forEach","eventListener","VBVMR_GetVoicemeeterType","versionPtr","VBVMR_GetVoicemeeterVersion","selector","parameterName","State","indexOf","VBVMR_GetParameterStringA","split","filter","e","join","VBVMR_GetParameterFloat","scriptString","StateOnly","Trigger","Color","SaveBus","LoadBus","SaveStrip","LoadStrip","setRaw","init","regKey","Registry","hive","HKLM","key","values","err","items","unistallerPath","find","fileNameIndex","lastIndexOf","slice","reject","DLLHandler","then","dllPath","ffi","Library","VBVMR_RunVoicemeeter","get","constants","InterfaceTypes","strip","bus"],"mappings":"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"}